diff --git a/lib/nettle/ecc.h b/lib/nettle/ecc.h
index dc0d36c..d910173 100644
--- a/lib/nettle/ecc.h
+++ b/lib/nettle/ecc.h
@@ -110,8 +110,8 @@ typedef struct {
 void ecc_sizes(int *low, int *high);
 int  ecc_get_size(ecc_key *key);
 
-int ecc_make_key(void *random_ctx, nettle_random_func random, ecc_key *key, const ecc_set_type *dp);
-int ecc_make_key_ex(void *random_ctx, nettle_random_func random, ecc_key *key, mpz_t prime, mpz_t order, mpz_t A, mpz_t B, mpz_t Gx, mpz_t Gy, int timing_res);
+int ecc_make_key(void *random_ctx, nettle_random_func random, ecc_key *key, const ecc_set_type *dp, gnutls_ecc_curve_t id);
+int ecc_make_key_ex(void *random_ctx, nettle_random_func random, ecc_key *key, mpz_t prime, mpz_t order, mpz_t A, mpz_t B, mpz_t Gx, mpz_t Gy, gnutls_ecc_curve_t id, int timing_res);
 void ecc_free(ecc_key *key);
 
 int  ecc_shared_secret(ecc_key *private_key, ecc_key *public_key, 
@@ -119,11 +119,12 @@ int  ecc_shared_secret(ecc_key *private_key, ecc_key *public_key,
 
 int ecc_sign_hash(const unsigned char *in,  unsigned long inlen, 
                         struct dsa_signature *signature,
-                        void *random_ctx, nettle_random_func random, ecc_key *key);
+                        void *random_ctx, nettle_random_func random,
+                        ecc_key *key, gnutls_ecc_curve_t id);
 
 int  ecc_verify_hash(struct dsa_signature * signature,
                      const unsigned char *hash, unsigned long hashlen, 
-                     int *stat, ecc_key *key);
+                     int *stat, ecc_key *key, gnutls_ecc_curve_t id);
 
 /* low level functions */
 ecc_point *ecc_new_point(void);
diff --git a/lib/nettle/ecc_make_key.c b/lib/nettle/ecc_make_key.c
index e64fce9..7420101 100644
--- a/lib/nettle/ecc_make_key.c
+++ b/lib/nettle/ecc_make_key.c
@@ -38,6 +38,7 @@
   @param A            The "a" parameter of the curve
   @param Gx           The x coordinate of the base point
   @param Gy           The y coordinate of the base point
+  @param curve_id     The id of the curve we are working with
   @timing_res         If non zero the function will try to return in constant time.
   @return 0 if successful, upon error all allocated memory will be freed
 */
@@ -45,7 +46,7 @@
 int
 ecc_make_key_ex (void *random_ctx, nettle_random_func random, ecc_key * key,
                  mpz_t prime, mpz_t order, mpz_t A, mpz_t B, mpz_t Gx, mpz_t Gy,
-                 int timing_res)
+                 gnutls_ecc_curve_t curve_id, int timing_res)
 {
   int err;
   ecc_point *base;
@@ -92,7 +93,7 @@ ecc_make_key_ex (void *random_ctx, nettle_random_func random, ecc_key * key,
   mpz_set (base->x, key->Gx);
   mpz_set (base->y, key->Gy);
   mpz_set_ui (base->z, 1);
-  
+
   nettle_mpz_set_str_256_u (key->k, keysize, buf);
 
   /* the key should be smaller than the order of base point */
@@ -104,7 +105,7 @@ ecc_make_key_ex (void *random_ctx, nettle_random_func random, ecc_key * key,
   if (timing_res)
     err = ecc_mulmod_timing (key->k, base, &key->pubkey, key->A, key->prime, 1);
   else
-    err = ecc_mulmod_wmnaf (key->k, base, &key->pubkey, key->A, key->prime, 1);
+    err = ecc_mulmod_wmnaf_cached (key->k, curve_id, &key->pubkey, key->A, key->prime, 1);
 
   if (err != 0)
     goto errkey;
@@ -127,7 +128,7 @@ ERR_BUF:
 
 int
 ecc_make_key (void *random_ctx, nettle_random_func random, ecc_key * key,
-              const ecc_set_type * dp)
+              const ecc_set_type * dp, gnutls_ecc_curve_t curve_id)
 {
   mpz_t prime, order, Gx, Gy, A, B;
   int err;
@@ -146,7 +147,7 @@ ecc_make_key (void *random_ctx, nettle_random_func random, ecc_key * key,
   mpz_set_str (A, (char *) dp->A, 16);
   mpz_set_str (B, (char *) dp->B, 16);
 
-  err = ecc_make_key_ex (random_ctx, random, key, prime, order, A, B, Gx, Gy, 0);
+  err = ecc_make_key_ex (random_ctx, random, key, prime, order, A, B, Gx, Gy, curve_id, 0);
 
   mp_clear_multi (&prime, &order, &A, &B, &Gx, &Gy, NULL);
 cleanup:
diff --git a/lib/nettle/ecc_sign_hash.c b/lib/nettle/ecc_sign_hash.c
index bd78da0..74ebe16 100644
--- a/lib/nettle/ecc_sign_hash.c
+++ b/lib/nettle/ecc_sign_hash.c
@@ -38,12 +38,14 @@
   @param prng      An active PRNG state
   @param wprng     The index of the PRNG you wish to use
   @param key       A private ECC key
+  @param curve_id  The id of the curve we are working with
   @return 0 if successful
 */
 int
 ecc_sign_hash (const unsigned char *in, unsigned long inlen,
                struct dsa_signature *sig,
-               void *random_ctx, nettle_random_func random, ecc_key * key)
+               void *random_ctx, nettle_random_func random, ecc_key * key,
+               gnutls_ecc_curve_t curve_id)
 {
   ecc_key pubkey;
   mpz_t e;
@@ -72,7 +74,7 @@ ecc_sign_hash (const unsigned char *in, unsigned long inlen,
     {
       if ((err =
            ecc_make_key_ex (random_ctx, random, &pubkey, key->prime,
-                            key->order, key->A, key->B, key->Gx, key->Gy, 1)) != 0)
+                            key->order, key->A, key->B, key->Gx, key->Gy, curve_id, 1)) != 0)
         {
           goto errnokey;
         }
diff --git a/lib/nettle/ecc_verify_hash.c b/lib/nettle/ecc_verify_hash.c
index 445d594..fc31735 100644
--- a/lib/nettle/ecc_verify_hash.c
+++ b/lib/nettle/ecc_verify_hash.c
@@ -46,12 +46,13 @@
    @param hashlen     The length of the hash (octets)
    @param stat        Result of signature, 1==valid, 0==invalid
    @param key         The corresponding public ECC key
+   @param curve_id    The id of the curve we are working with
    @return 0 if successful (even if the signature is not valid)
 */
 int
 ecc_verify_hash (struct dsa_signature *signature,
                  const unsigned char *hash, unsigned long hashlen,
-                 int *stat, ecc_key * key)
+                 int *stat, ecc_key * key, gnutls_ecc_curve_t curve_id)
 {
   ecc_point *mG, *mQ;
   mpz_t v, w, u1, u2, e;
@@ -111,7 +112,7 @@ ecc_verify_hash (struct dsa_signature *signature,
   mpz_set (mQ->z, key->pubkey.z);
 
   /* compute u1*mG + u2*mQ = mG */
-  if ((err = ecc_mulmod_wmnaf (u1, mG, mG, key->A, key->prime, 0)) != 0)
+  if ((err = ecc_mulmod_wmnaf_cached (u1, curve_id, mG, key->A, key->prime, 0)) != 0)
     {
       goto error;
     }
@@ -122,7 +123,7 @@ ecc_verify_hash (struct dsa_signature *signature,
 
   /* add them */
   if ((err =
-       ecc_projective_add_point (mQ, mG, mG, key->A, key->prime)) != 0)
+       ecc_projective_add_point_ng (mQ, mG, mG, key->A, key->prime)) != 0)
     {
       goto error;
     }
diff --git a/lib/nettle/pk.c b/lib/nettle/pk.c
index cb898fc..8f7f324 100644
--- a/lib/nettle/pk.c
+++ b/lib/nettle/pk.c
@@ -140,7 +140,7 @@ static int _wrap_nettle_pk_derive(gnutls_pk_algorithm_t algo, gnutls_datum_t * o
 
         _ecc_params_to_pubkey(pub, &ecc_pub);
         _ecc_params_to_privkey(priv, &ecc_priv);
-        
+
         if (ecc_projective_check_point(&ecc_pub.pubkey, pub->params[ECC_B], pub->params[ECC_PRIME]) != 0)
           {
             ret = gnutls_assert_val(GNUTLS_E_RECEIVED_ILLEGAL_PARAMETER);
@@ -379,6 +379,7 @@ _wrap_nettle_pk_sign (gnutls_pk_algorithm_t algo,
       {
         ecc_key priv;
         struct dsa_signature sig;
+        int curve_id = pk_params->flags;
 
         _ecc_params_to_privkey(pk_params, &priv);
 
@@ -393,7 +394,7 @@ _wrap_nettle_pk_sign (gnutls_pk_algorithm_t algo,
           }
 
         ret = ecc_sign_hash(vdata->data, hash_len, 
-                            &sig, NULL, rnd_func, &priv);
+                            &sig, NULL, rnd_func, &priv, curve_id);
         if (ret != 0)
           {
             gnutls_assert ();
@@ -560,6 +561,7 @@ _wrap_nettle_pk_verify (gnutls_pk_algorithm_t algo,
         ecc_key pub;
         struct dsa_signature sig;
         int stat;
+        int curve_id = pk_params->flags;
 
         ret = _gnutls_decode_ber_rs (signature, &tmp[0], &tmp[1]);
         if (ret < 0)
@@ -576,7 +578,7 @@ _wrap_nettle_pk_verify (gnutls_pk_algorithm_t algo,
         if (hash_len > vdata->size)
           hash_len = vdata->size;
 
-        ret = ecc_verify_hash(&sig, vdata->data, hash_len, &stat, &pub);
+        ret = ecc_verify_hash(&sig, vdata->data, hash_len, &stat, &pub, curve_id);
         if (ret != 0 || stat != 1)
           {
             gnutls_assert();
@@ -763,7 +765,7 @@ dsa_fail:
             params->params_nr++;
 
           }
-          
+
         ret = 0;
 
         _gnutls_mpi_set (params->params[0], pub.n);
@@ -793,7 +795,7 @@ rsa_fail:
         st = _gnutls_ecc_curve_get_params(level);
         if (st == NULL)
           return gnutls_assert_val(GNUTLS_E_ECC_UNSUPPORTED_CURVE);
-        
+
         tls_ecc_set.size = st->size;
         tls_ecc_set.prime = st->prime;
         tls_ecc_set.order = st->order;
@@ -802,7 +804,7 @@ rsa_fail:
         tls_ecc_set.A = st->A;
         tls_ecc_set.B = st->B;
 
-        ret = ecc_make_key(NULL, rnd_func, &key, &tls_ecc_set);
+        ret = ecc_make_key(NULL, rnd_func, &key, &tls_ecc_set, st->id);
         if (ret != 0)
           return gnutls_assert_val(GNUTLS_E_INTERNAL_ERROR);
 
@@ -828,10 +830,10 @@ rsa_fail:
         mpz_set(TOMPZ(params->params[ECC_X]), key.pubkey.x);
         mpz_set(TOMPZ(params->params[ECC_Y]), key.pubkey.y);
         mpz_set(TOMPZ(params->params[ECC_K]), key.k);
-        
+
 ecc_fail:
         ecc_free(&key);
-        
+
         if (ret < 0)
           goto fail;
 
@@ -869,7 +871,7 @@ wrap_nettle_pk_verify_params (gnutls_pk_algorithm_t algo,
 
         if (params->params_nr != RSA_PRIVATE_PARAMS)
           return gnutls_assert_val(GNUTLS_E_INVALID_REQUEST);
-        
+
         t1 = _gnutls_mpi_new (256);
         if (t1 == NULL)
           return gnutls_assert_val(GNUTLS_E_MEMORY_ERROR);
@@ -896,13 +898,13 @@ wrap_nettle_pk_verify_params (gnutls_pk_algorithm_t algo,
             ret = gnutls_assert_val(GNUTLS_E_MEMORY_ERROR);
             goto rsa_cleanup;
           }
-  
+
         if (_gnutls_mpi_cmp(params->params[RSA_E1], t2) != 0)
           {
             ret = gnutls_assert_val(GNUTLS_E_ILLEGAL_PARAMETER);
             goto rsa_cleanup;
           }
-        
+
         _gnutls_mpi_sub_ui (t1, params->params[RSA_PRIME2], 1);
         _gnutls_mpi_release(&t2);
 
@@ -912,13 +914,13 @@ wrap_nettle_pk_verify_params (gnutls_pk_algorithm_t algo,
             ret = gnutls_assert_val(GNUTLS_E_MEMORY_ERROR);
             goto rsa_cleanup;
           }
-  
+
         if (_gnutls_mpi_cmp(params->params[RSA_E2], t2) != 0)
           {
             ret = gnutls_assert_val(GNUTLS_E_ILLEGAL_PARAMETER);
             goto rsa_cleanup;
           }
-        
+
         ret = 0;
 
 rsa_cleanup:
@@ -933,7 +935,7 @@ rsa_cleanup:
 
         if (params->params_nr != DSA_PRIVATE_PARAMS)
           return gnutls_assert_val(GNUTLS_E_INVALID_REQUEST);
-        
+
         t1 = _gnutls_mpi_new (256);
         if (t1 == NULL)
           return gnutls_assert_val(GNUTLS_E_MEMORY_ERROR);
@@ -982,7 +984,7 @@ dsa_cleanup:
         memcpy(&zero.z, ecc_priv.pubkey.z, sizeof(mpz_t)); /* z = 1 */
 
         /* verify that k*(Gx,Gy)=(x,y) */
-        ret = ecc_mulmod_wmnaf(ecc_priv.k, &zero, R, TOMPZ(params->params[ECC_A]), TOMPZ(params->params[ECC_PRIME]), 1);
+        ret = ecc_mulmod_wmnaf_cached(ecc_priv.k, curve, R, TOMPZ(params->params[ECC_A]), TOMPZ(params->params[ECC_PRIME]), 1);
         if (ret != 0)
           {
             ret = gnutls_assert_val(GNUTLS_E_ILLEGAL_PARAMETER);
@@ -994,13 +996,13 @@ dsa_cleanup:
             ret = gnutls_assert_val(GNUTLS_E_ILLEGAL_PARAMETER);
             goto ecc_cleanup;
           }
-        
+
         ret = 0;
 
 ecc_cleanup:
         _ecc_params_clear(&ecc_priv);
         ecc_del_point(R);
-      }  
+      }
       break;
     default:
       ret = gnutls_assert_val(GNUTLS_E_INVALID_REQUEST);
