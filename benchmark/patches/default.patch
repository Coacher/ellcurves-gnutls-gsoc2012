diff --git a/src/benchmark-tls.c b/src/benchmark-tls.c
index 10bcf63..6f8f69e 100644
--- a/src/benchmark-tls.c
+++ b/src/benchmark-tls.c
@@ -30,6 +30,7 @@
 #include <errno.h>
 #include <gnutls/gnutls.h>
 #include <gnutls/crypto.h>
+#include <math.h>
 
 #define fail(...) \
 	{ \
@@ -261,7 +262,7 @@ static void test_ciphersuite(const char *cipher_prio, int size)
 
     HANDSHAKE(client, server);
 
-    fprintf(stdout, "Testing %s with %d packet size: ",
+    fprintf(stdout, "Testing %s with %d packet size...\n",
             gnutls_cipher_suite_get_name(gnutls_kx_get(server),
                                          gnutls_cipher_get(server),
                                          gnutls_mac_get(server)), size);
@@ -297,6 +298,7 @@ static void test_ciphersuite(const char *cipher_prio, int size)
     while (benchmark_must_finish == 0);
 
     stop_benchmark(&st, NULL);
+    fprintf(stdout, "\n");
 
     gnutls_bye(client, GNUTLS_SHUT_WR);
     gnutls_bye(server, GNUTLS_SHUT_WR);
@@ -311,6 +313,41 @@ static void test_ciphersuite(const char *cipher_prio, int size)
 
 }
 
+static
+double calc_avg(unsigned int *diffs, unsigned int diffs_size)
+{
+double avg = 0;
+unsigned int i;
+
+  for(i=0;i<diffs_size;i++)
+    avg += diffs[i];
+    
+  avg /= diffs_size;
+
+  return avg;
+}
+
+static
+double calc_sstdev(unsigned int *diffs, unsigned int diffs_size, double avg)
+{
+double sum = 0, d;
+unsigned int i;
+
+  for (i=0;i<diffs_size;i++) {
+    d = ((double)diffs[i] - avg);
+    d *= d;
+    
+    sum += d;
+  }
+  sum /= diffs_size - 1;
+  
+  return sum;
+}
+
+
+unsigned int diffs[32*1024];
+unsigned int diffs_size = 0;
+
 static void test_ciphersuite_kx(const char *cipher_prio)
 {
     /* Server stuff. */
@@ -328,6 +365,8 @@ static void test_ciphersuite_kx(const char *cipher_prio)
     /* Need to enable anonymous KX specifically. */
     int ret;
     struct benchmark_st st;
+    struct timespec tr_start, tr_stop;
+    double avg, sstddev;
 
     /* Init server */
     gnutls_certificate_allocate_credentials(&s_certcred);
@@ -348,6 +387,8 @@ static void test_ciphersuite_kx(const char *cipher_prio)
     start_benchmark(&st);
 
     do {
+        gettime(&tr_start);
+        
         gnutls_init(&server, GNUTLS_SERVER);
         ret = gnutls_priority_set_direct(server, cipher_prio, &str);
         if (ret < 0) {
@@ -389,13 +430,24 @@ static void test_ciphersuite_kx(const char *cipher_prio)
         gnutls_deinit(client);
         gnutls_deinit(server);
 
+        gettime(&tr_stop);
+
+        diffs[diffs_size++] = timespec_sub_ms(&tr_stop, &tr_start);
+        if (diffs_size > sizeof(diffs))
+          abort();
+
         st.size += 1;
     }
     while (benchmark_must_finish == 0);
 
-    fprintf(stdout, "Tested %s: ", suite);
+    fprintf(stdout, "Benchmarked %s.\n", suite);
     stop_benchmark(&st, "transactions");
 
+    avg = calc_avg(diffs, diffs_size);
+    sstddev = calc_sstdev(diffs, diffs_size, avg);
+
+    printf("  Average time: %.2f ms, sample variance: %.2f\n\n", avg, sstddev);
+
     gnutls_anon_free_client_credentials(c_anoncred);
     gnutls_anon_free_server_credentials(s_anoncred);
 
@@ -408,8 +460,8 @@ void benchmark_tls(int debug_level)
     gnutls_global_set_log_function(tls_log_func);
     gnutls_global_set_log_level(debug_level);
     gnutls_global_init();
-
-    printf("Testing throughput in cipher/MAC combinations:\n");
+/*
+    printf("Testing throughput in cipher/MAC combinations:\n\n");
 
     test_ciphersuite(PRIO_ARCFOUR_128_MD5, 1024);
     test_ciphersuite(PRIO_ARCFOUR_128_MD5, 4096);
@@ -430,12 +482,16 @@ void benchmark_tls(int debug_level)
     test_ciphersuite(PRIO_CAMELLIA_CBC_SHA1, 4096);
     test_ciphersuite(PRIO_CAMELLIA_CBC_SHA1, 8 * 1024);
     test_ciphersuite(PRIO_CAMELLIA_CBC_SHA1, 15 * 1024);
-
-    printf("\nTesting key exchanges (RSA/DH bits: %d, EC bits: %d):\n", rsa_bits, ec_bits);
+*/
+    printf("\nTesting key exchanges (RSA/DH bits: %d, EC bits: %d):\n\n", rsa_bits, ec_bits);
+    /*
     test_ciphersuite_kx(PRIO_DH);
     test_ciphersuite_kx(PRIO_ECDH);
+    */
     test_ciphersuite_kx(PRIO_ECDHE_ECDSA);
+    /*
     test_ciphersuite_kx(PRIO_RSA);
+    */
 
     gnutls_global_deinit();
     
diff --git a/src/benchmark.c b/src/benchmark.c
index 398c732..4d4f65e 100644
--- a/src/benchmark.c
+++ b/src/benchmark.c
@@ -109,7 +109,7 @@ void start_benchmark(struct benchmark_st * st)
       exit(1);
     }
 #else
-  alarm (2);
+  alarm (60);
 #endif
   
 }
@@ -142,14 +142,14 @@ double stop_benchmark(struct benchmark_st * st, const char* metric)
   if (metric == NULL)
     { /* assume bytes/sec */
       value2human (st->size, secs, &ddata, &dspeed, imetric);
-      printf ("Processed %.2f %s in %.2f secs: ", ddata, imetric, secs);
+      printf ("  Processed %.2f %s in %.2f secs: ", ddata, imetric, secs);
       printf ("%.2f %s/sec\n", dspeed, imetric);
     }
   else
     {
       ddata = (double) st->size;
       dspeed = ddata / secs;
-      printf ("Processed %.2f %s in %.2f secs: ", ddata, metric, secs);
+      printf ("  Processed %.2f %s in %.2f secs: ", ddata, metric, secs);
       printf ("%.2f %s/sec\n", dspeed, metric);
     }
 
diff --git a/src/benchmark.h b/src/benchmark.h
index 228a960..65b2192 100644
--- a/src/benchmark.h
+++ b/src/benchmark.h
@@ -47,3 +47,9 @@ extern int benchmark_must_finish;
 void start_benchmark(struct benchmark_st * st);
 double stop_benchmark(struct benchmark_st * st, const char* metric);
 
+inline static unsigned int
+timespec_sub_ms (struct timespec *a, struct timespec *b)
+{
+  return (a->tv_sec * 1000 + a->tv_nsec / (1000 * 1000) -
+          (b->tv_sec * 1000 + b->tv_nsec / (1000 * 1000)));
+}
